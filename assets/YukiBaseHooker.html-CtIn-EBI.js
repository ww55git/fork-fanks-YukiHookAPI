import{_ as o,o as s,c as a,a as e}from"./app-BFk-K-88.js";const n={},c=e(`<h1 id="yukibasehooker-class" tabindex="-1"><a class="header-anchor" href="#yukibasehooker-class" aria-hidden="true">#</a> YukiBaseHooker <span class="symbol">- class</span></h1><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">abstract</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">YukiBaseHooker</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">PackageParam</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p><code>YukiHookAPI</code> 的子类 Hooker 实现。</p></blockquote><h2 id="onhook-method" tabindex="-1"><a class="header-anchor" href="#onhook-method" aria-hidden="true">#</a> onHook <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onHook</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>子类 Hook 开始。</p></blockquote>`,12),l=[c];function t(r,p){return s(),a("div",null,l)}const i=o(n,[["render",t],["__file","YukiBaseHooker.html.vue"]]);export{i as default};
